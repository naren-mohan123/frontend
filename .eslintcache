[{"/home/naren/Desktop/project/React/confusion/src/components/MainComponent.js":"1","/home/naren/Desktop/project/React/confusion/src/shared/baseUrl.js":"2","/home/naren/Desktop/project/React/confusion/src/components/DishdetailComponent.js":"3","/home/naren/Desktop/project/React/confusion/src/reportWebVitals.js":"4","/home/naren/Desktop/project/React/confusion/src/Redux/favorites.js":"5","/home/naren/Desktop/project/React/confusion/src/Redux/auth.js":"6","/home/naren/Desktop/project/React/confusion/src/components/MenuComponent.js":"7","/home/naren/Desktop/project/React/confusion/src/Redux/comments.js":"8","/home/naren/Desktop/project/React/confusion/src/Redux/ActionCreators.js":"9","/home/naren/Desktop/project/React/confusion/src/Redux/configureStore.js":"10","/home/naren/Desktop/project/React/confusion/src/components/FavoriteComponent.js":"11"},{"size":5588,"mtime":1616839801771,"results":"12","hashOfConfig":"13"},{"size":49,"mtime":1616589831969,"results":"14","hashOfConfig":"13"},{"size":7700,"mtime":1616839831316,"results":"15","hashOfConfig":"13"},{"size":362,"mtime":1607941976358,"results":"16","hashOfConfig":"13"},{"size":630,"mtime":1616829619901,"results":"17","hashOfConfig":"13"},{"size":1503,"mtime":1616611036525,"results":"18","hashOfConfig":"13"},{"size":2336,"mtime":1616780371806,"results":"19","hashOfConfig":"13"},{"size":523,"mtime":1613828531377,"results":"20","hashOfConfig":"13"},{"size":11150,"mtime":1616827830979,"results":"21","hashOfConfig":"13"},{"size":872,"mtime":1616829641701,"results":"22","hashOfConfig":"13"},{"size":2595,"mtime":1616830025989,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"7yfqg9",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"/home/naren/Desktop/project/React/confusion/src/components/MainComponent.js",[],"/home/naren/Desktop/project/React/confusion/src/shared/baseUrl.js",[],"/home/naren/Desktop/project/React/confusion/src/components/DishdetailComponent.js",["48","49","50","51","52","53","54"],"import React, { Component } from \"react\";\nimport {Card, CardImg, CardImgOverlay, CardText, CardTitle, CardBody, Breadcrumb, BreadcrumbItem,Button,\n        Modal,ModalBody,ModalHeader, Row, Col} from \"reactstrap\";\nimport { Link } from \"react-router-dom\";\nimport { LocalForm,Control,Errors } from \"react-redux-form\";\nimport { Loading } from \"./LoadingComponent\";\nimport { baseUrl } from '../shared/baseUrl';\nimport { FadeTransform, Fade, Stagger } from \"react-animation-components\";\nimport { checkPropTypes } from \"prop-types\";\n\nconst required = (val) => (val) && (val.length);\nconst maxLength = (len) => (val)=> !(val) || (val.length <= len);\nconst minLength = (len) => (val)=> (val) && (val.length >= len);\n\nclass CommentForm extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            isModalOpen : false\n        }\n        this.toggleModal = this.toggleModal.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    toggleModal(){\n        this.setState({\n            isModalOpen : !this.state.isModalOpen\n        });\n    }\n\n    handleSubmit(values){\n        this.toggleModal();\n        this.props.postComment(this.props.dishId,values.rating,values.comment);\n    }\n\n    render(){\n        return(\n            <React.Fragment>\n                <div>\n                    <Button outline onClick={this.toggleModal} >\n                        <span className=\"fa fa-pencil fa-lg\">Submit Comment</span>\n                    </Button>\n                </div>\n                \n                <Modal isOpen = {this.state.isModalOpen} toggle = {this.toggleModal}>\n                    <ModalHeader toggle = {this.toggleModal}>Submit Comment</ModalHeader>\n                    <ModalBody>\n                        <LocalForm onSubmit = {(values)=> this.handleSubmit(values)}>\n                        <div className =\"form-group\">\n                                <label htmlFor = \"Rating\" >Rating</label>\n                                <Control.select model = \".rating\" name = \"rating\" className = \"form-control\">\n                                <option value=\"1\" >1</option>\n                                <option value=\"2\">2</option>\n                                <option value=\"3\">3</option>\n                                <option value=\"4\">4</option>\n                                <option value=\"5\">5</option>\n                                </Control.select>\n                        </div>\n                        <div className=\"form-group\">\n                                <label htmlFor = \"comment\">Comment</label>\n                                <Control.textarea model = \".comment\" name=\"comment\" id=\"comment\"\n                                                  rows=\"6\"\n                                                className = \"form-control\"\n                                />\n                        </div>\n                        <Row className=\"form-group\">\n                                <Col md={{size: 10}}>\n                                    <Button type=\"submit\" color=\"primary\">\n                                        Submit\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </LocalForm>\n                    </ModalBody>\n\n                </Modal>\n\n            </React.Fragment>\n        )\n    }\n\n}\n\n    function RenderDish({dish,dishId, favorite, postFavorite}){\n        if(dish!=null){\n            return(\n                <FadeTransform in \n                        transformProps = {{\n                            exitTransform : \"scale(0.5) translateY(-50%)\"\n                }}>\n                <Card>\n                <CardImg top src={baseUrl + dish.image} alt={dish.name} />\n                <CardImgOverlay>\n                    <Button outline color=\"primary\" onClick={() => favorite ? console.log('Already favorite') : postFavorite(dish._id)} >\n                        {favorite ?\n                            <span className=\"fa fa-heart\"></span>\n                            : \n                            <span className=\"fa fa-heart-o\"></span>\n                        }\n                    </Button>\n                </CardImgOverlay>\n                <CardBody>\n                  <CardTitle>{dish.name}</CardTitle>\n                  <CardText>{dish.description}</CardText>\n                </CardBody>\n                </Card>\n            </FadeTransform>\n                \n            );\n        }\n        else{\n            return(\n                <div></div>\n            );\n        }\n    }\n\n    function RenderComments({comments,postComment,dishId}){\n        if(comments!=null){\n            return(\n                <div >\n                    <h4>Comments</h4>\n                    <ul className=\"list-unstyled\">\n                        <Stagger in>\n                        {comments.map((comment)=> {\n                            return(\n                                <Fade in >\n                                <li key={comment._id}>\n                                    <div>\n                                        <p>{comment.comment}</p>\n                                        <p>{comment.rating} stars</p>\n                                        <p>--{comment.author.firstname} {comment.author.lastname}, \n                                        {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day:'2-digit'}).format(new Date(Date.parse(comment.updatedAt)))}\n                                        </p>\n                                </div>\n                                </li>\n                                </Fade>\n                            );\n                        })}\n                        </Stagger>\n                    </ul>\n                    <CommentForm dishId = {dishId} postComment = {postComment}/>\n                </div>\n            );\n        }\n        \n        else{\n            return(\n                <div></div>\n            );\n        }\n    }\n\n    const DishDetail = (props) => {\n\n        if(props.isLoading){\n            return(\n                <div className = \"conatiner\">\n                    <div className = \"row\">\n                        <Loading/>\n                    </div>\n                </div>\n            )\n        }\n\n        else if(props.ErrMess){\n            return(\n                <div className = \"conatiner\">\n                <div className = \"row\">\n                    <h4>{props.errMess}</h4>\n                </div>\n            </div>\n            )\n        }\n\n        else \n            return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n\n                        <BreadcrumbItem><Link to=\"/menu\">Menu</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>{props.dish.name}</h3>\n                        <hr />\n                    </div>                \n                </div>\n                <div className=\"row\">\n                    <div className=\"col-12 col-md-5 m-1\">\n                        <RenderDish dish={props.dish} favorite={props.favorite} postFavorite={props.postFavorite} />\n                    </div>\n                    <div className=\"col-12 col-md-5 m-1\">\n                        <RenderComments comments={props.comments} \n                                        postComment = {props.postComment}\n                                        dishId = {props.dish._id} \n                        />\n                    </div>\n                </div>\n                </div>\n        );\n    }\n\nexport default DishDetail;","/home/naren/Desktop/project/React/confusion/src/reportWebVitals.js",[],"/home/naren/Desktop/project/React/confusion/src/Redux/favorites.js",[],"/home/naren/Desktop/project/React/confusion/src/Redux/auth.js",[],"/home/naren/Desktop/project/React/confusion/src/components/MenuComponent.js",["55","56","57"],"/home/naren/Desktop/project/React/confusion/src/Redux/comments.js",[],"/home/naren/Desktop/project/React/confusion/src/Redux/ActionCreators.js",[],"/home/naren/Desktop/project/React/confusion/src/Redux/configureStore.js",[],"/home/naren/Desktop/project/React/confusion/src/components/FavoriteComponent.js",["58"],"import React, { Component } from 'react';\nimport { Media, Breadcrumb, BreadcrumbItem, Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { baseUrl } from '../shared/baseUrl';\nimport { Loading } from './LoadingComponent';\n\nfunction RenderMenuItem({ dish, deleteFavorite }) {\n    return(\n        <Media tag=\"li\">\n            <Media left middle>\n                <Media object src={baseUrl + dish.image} alt={dish.name} />\n            </Media>\n            <Media body className=\"ml-5\">\n                <Media heading>{dish.name}</Media>\n                <p>{dish.description}</p>\n                <Button outline color=\"danger\" onClick={() => deleteFavorite(dish._id)}>\n                    <span className=\"fa fa-times\"></span>\n                </Button>\n            </Media>\n        </Media>\n    );\n}\n\nconst Favorites = (props) => {\n\n    if (props.favorites.isLoading) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Loading />\n                </div>\n            </div>\n        );\n    }\n    else if (props.favorites.errMess) {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>{props.favorites.errMess}</h4>\n                </div>\n            </div>\n        )\n    }\n    else if (props.favorites.favorites) {\n\n        const favorites = props.favorites.favorites.dishes.map((dish) => {\n            return (\n                <div key={dish._id} className=\"col-12 mt-5\">\n                    <RenderMenuItem dish={dish} deleteFavorite={props.deleteFavorite} />\n                </div>\n            );\n        });\n\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <Breadcrumb>\n                        <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\n                        <BreadcrumbItem active>My Favorites</BreadcrumbItem>\n                    </Breadcrumb>\n                    <div className=\"col-12\">\n                        <h3>My Favorites</h3>\n                        <hr />\n                    </div>\n                </div>\n                <div className=\"row\">\n                    <Media list>\n                        {favorites}\n                    </Media>\n                </div>\n            </div>\n        );\n    }\n    else {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <h4>You have no favorites</h4>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Favorites;",{"ruleId":"59","severity":1,"message":"60","line":5,"column":28,"nodeType":"61","messageId":"62","endLine":5,"endColumn":34},{"ruleId":"59","severity":1,"message":"63","line":9,"column":10,"nodeType":"61","messageId":"62","endLine":9,"endColumn":24},{"ruleId":"59","severity":1,"message":"64","line":11,"column":7,"nodeType":"61","messageId":"62","endLine":11,"endColumn":15},{"ruleId":"59","severity":1,"message":"65","line":12,"column":7,"nodeType":"61","messageId":"62","endLine":12,"endColumn":16},{"ruleId":"59","severity":1,"message":"66","line":13,"column":7,"nodeType":"61","messageId":"62","endLine":13,"endColumn":16},{"ruleId":"67","severity":1,"message":"68","line":51,"column":33,"nodeType":"69","endLine":51,"endColumn":110},{"ruleId":"67","severity":1,"message":"70","line":61,"column":33,"nodeType":"69","endLine":64,"endColumn":35},{"ruleId":"59","severity":1,"message":"71","line":2,"column":10,"nodeType":"61","messageId":"62","endLine":2,"endColumn":15},{"ruleId":"59","severity":1,"message":"72","line":3,"column":41,"nodeType":"61","messageId":"62","endLine":3,"endColumn":49},{"ruleId":"59","severity":1,"message":"73","line":3,"column":51,"nodeType":"61","messageId":"62","endLine":3,"endColumn":59},{"ruleId":"59","severity":1,"message":"74","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},"no-unused-vars","'Errors' is defined but never used.","Identifier","unusedVar","'checkPropTypes' is defined but never used.","'required' is assigned a value but never used.","'maxLength' is assigned a value but never used.","'minLength' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","'Media' is defined but never used.","'CardText' is defined but never used.","'CardBody' is defined but never used.","'Component' is defined but never used."]